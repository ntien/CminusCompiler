1. translation_unit
	: compilerdir_or_external_declaration { compilerdir_or_external_declaration }


2. compilerdir_or_external_declaration
	: define_directive
	| external_declaration
	

3. define_directive
	: POUND DEFINE IDENTIFIER define_type 


4. define_type
	: CONST
	| STRING_LITERAL


5. external_declaration
    : type_specifier external_next
    | direct_declarator function_definition
    | type_qualifier type_specifier init_declarator_list SEMICOLON { declaration_specifiers SEMICOLON }
    | TYPEDEF type_specifier SEMICOLON { declaration_specifiers SEMICOLON }


6. external_next
    : init_declarator_list SEMICOLON { declaration_specifiers SEMICOLON }
    | direct_declarator function_definition
	
		
7. function_definition
	: declaration_list compound_statement
	| compound_statement


8. declaration
	: declaration_specifiers SEMICOLON { declaration_specifiers SEMICOLON }


9. declaration_specifiers
	: type_qualifier_specifier init_declarator_list 
	| TYPEDEF type_specifier


10. type_qualifier_specifier
	: type_qualifier type_specifier
	| type_specifier


11. type_qualifier
	: CONST	


12. type_specifier
	: VOID
	| CHAR	
	| INT
	| struct_specifier
	| TYPE_NAME
		

13. init_declarator_list
	: direct_declarator init_declarator { COMMA direct_declarator init_declarator }
	


14. init_declarator
	: EQ_OP initializer
	| EPSILON

17. direct_declarator
	: IDENTIFIER
	| OPEN_PAREN direct_declarator_next1
	| OPEN_BRACKET direct_declarator_next2


18. direct_declarator_next1
	: pointer direct_declarator CLOSE_PAREN
	| parameter_list CLOSE_PAREN direct_declarator
	| identifier_list CLOSE_PAREN direct_declarator
	| CLOSE_PAREN direct_declarator


19. direct_declarator_next2
	: logical_or_expression CLOSE_BRACKET direct_declarator
	| CLOSE_BRACKET direct_declarator


20. parameter_list
	: parameter_declaration { COMMA parameter_declaration}


21. parameter_declaration
	: declaration_specifiers parameter_declaration_next

	
22. parameter_declaration_next
	: pointer choose_declarator
	| EPSILON


23. choose_declarator
	: direct_declarator
	| abstract_declarator

24. identifier_list
	: IDENTIFIER { COMMA IDENTIFIER }

	
25. initializer
	: assignment_expression
	| OPEN_BRACE ZERO CLOSE_BRACE 
		

26. type_name
	: type_qualifier_specifier type_name_next

	
27. type_name_next
	: pointer abstract_declarator
	| EPSILON

28. abstract_declarator
	: abstract_declarator_next
	| direct_abstract_declarator	

29. abstract_declarator_next
	: direct_abstract_declarator
	| EPSILON


30. direct_abstract_declarator
	: OPEN_PAREN direct_abstract_declarator_next1 { direct_abstract_declarator_next3 }
	| OPEN_BRACKET direct_abstract_declarator_next2 { direct_abstract_declarator_next3 }
		

31. direct_abstract_declarator_next1
	: pointer abstract_declarator CLOSE_PAREN
	| CLOSE_PAREN
	| parameter_list CLOSE_PAREN

	
32. direct_abstract_declarator_next2
	: CLOSE_BRACKET
	| logical_or_expression CLOSE_BRACKET


33. direct_abstract_declarator_next3
	: OPEN_BRACKET direct_abstract_declarator_next2
	| OPEN_PAREN direct_abstract_declarator_next4

	
34. direct_abstract_declarator_next4
	: CLOSE_PAREN
	| parameter_list CLOSE_PAREN


35. struct_specifier
	: STRUCT struct_specifier_next


36. struct_specifier_next
	: IDENTIFIER struct_specifier_cont 
	| OPEN_BRACE struct_declaration_list CLOSE_BRACE

37. struct_specifier_cont
	: OPEN_BRACE struct_declaration_list CLOSE_BRACE
	| EPSILON

38. struct_declaration_list
	: struct_declaration { struct_declaration }
	

39. struct_declaration
	: type_specifier struct_declarator_list SEMICOLON


40. struct_declarator_list
	: direct_declarator { COMMA direct_declarator }


41. enum_specifier
	: ENUM OPEN_BRACE enumerator_list CLOSE_BRACE

	
42. enumerator_list
	: IDENTIFIER { COMMA IDENTIFIER }


43. pointer
	: POINTER pointer_next

	
44. pointer_next
	: type_qualifier optional_pointer
	| pointer
	| EPSILON

45. optional_pointer
  	: pointer
	| EPSILON

46. primary_expression
	: IDENTIFIER
	| CONSTANT
	| STRING_LITERAL
	| OPEN_PAREN expression CLOSE_PAREN
	
47. postfix_expression
	: primary_expression { postfix_expression_next }

48. postfix_expression_next
	: OPEN_BRACKET expression CLOSE_BRACKET
	| OPEN_PAREN postfix_expression_next_brace
	| PERIOD IDENTIFIER
	| PTR_OP IDENTIFIER
	| INC_OP
	| DEC_OP

49. postfix_expression_next_brace
	: CLOSE_PAREN
	| argument_expression_list CLOSE_PAREN


50. argument_expression_list
	: assignment_expression { COMMA assignment_expression }


51. unary_expression
	: postfix_expression
	| INC_OP unary_expression
	| DEC_OP unary_expression
	| unary_operator unary_expression
	| SIZEOF unary_expression_sizeof


52. unary_expression_sizeof
	: OPEN_PAREN unary_expression_sizeof_cont
	
53. unary_expression_sizeof_cont
	: type_specifier CLOSE_PAREN
	| IDENTIFIER CLOSE_PAREN

54. unary_operator
	: ADDRESS_OP
	| POINTER
	| POS 
	| NEG	
	| NOT 


55. multiplicative_expression
	: unary_expression { (MULT|DIVIDE|MOD) unary_expression }


56. additive_expression
	: multiplicative_expression { (PLUS|MINUS) multiplicative_expression }



57. relational_expression
	: additive_expression { (L_OP|G_OP|LE_OP|GE_OP)  additive_expression }


58. equality_expression
	: relational_expression { (EQ_OP|NE_OP) relational_expression }

	
59. logical_and_expression
	: equality_expression { AND_OP equality_expression }

	
60. logical_or_expression
	: logical_and_expression { OR_OP logical_and_expression }


61. assignment_expression
	: unary_expression { EQ_OP assignment_expression }
	

62. expression
	: assignment_expression { COMMA assignment_expression }

	
63. statement
	: compound_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement


64. compound_statement
	: OPEN_BRACE compound_statement_next


65. compound_statement_next
	: CLOSE_BRACE
	| statement_list CLOSE_BRACE
	| declaration_list compound_statement_next1

	
66. compound_statement_next1
	: CLOSE_BRACE
	| statement_list CLOSE_BRACE
	

67. statement_list
	: statement { statement }
	

68. declaration_list
	: declaration { declaration }
	

69. expression_statement
	: SEMICOLON
	| expression SEMICOLON

	
70. selection_statement
	: IF OPEN_PAREN expression CLOSE_PAREN statement selection_statement_next


71. selection_statement_next
	: ELSE statement
	| EPSILON		


73. iteration_statement
	: WHILE OPEN_PAREN expression CLOSE_PAREN statement


74. jump_statement
	:CONTINUE SEMICOLON
	| BREAK SEMICOLON
	| jump_return

75. jump_return
	: SEMICOLON
	| expression SEMICOLON
